plugins {
    id 'java'
//    id 'jvm-test-suite' // https://docs.gradle.org/current/userguide/jvm_test_suite_plugin.html#jvm_test_suite_plugin
    id "com.github.ben-manes.versions" version "0.51.0"
    id 'org.springframework.boot' version '3.3.2'
    // https://docs.spring.io/spring-boot/appendix/dependency-versions/coordinates.html
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
    id 'idea'
    id "org.sonarqube" version "4.4.1.3373"
}

group = 'com.github.jinahya'
version = '0.0.1-SNAPSHOT'

//java {
//    toolchain {
//        languageVersion = JavaLanguageVersion.of(21)
//    }
//}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
//    mavenLocal()
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.3") // https://spring.io/projects/spring-cloud
}

// https://docs.spring.io/spring-boot/appendix/dependency-versions/coordinates.html
// https://stackoverflow.com/a/63362780/330457
dependencyManagement {
    imports {
        // https://search.maven.org/artifact/org.springframework.boot/spring-boot-dependencies
        mavenBom "org.springframework.boot:spring-boot-dependencies:3.3.2"
        // https://search.maven.org/artifact/org.springframework.cloud/spring-cloud-dependencies
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier-nodep:3.16.1'
//    testImplementation 'org.apache.commons:commons-lang3:3.14.0'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.cloud:spring-cloud-starter-gateway'

    // https://search.maven.org/artifact/jakarta.platform/jakarta.jakartaee-bom
    implementation platform('jakarta.platform:jakarta.jakartaee-bom:11.0.0-M4')
//    compileOnly 'jakarta.xml.bind:jakarta.xml.bind-api'
//    compileOnly 'jakarta.validation:jakarta.validation-api'
//    compileOnly 'com.fasterxml.jackson.core:jackson-databind'
//    testRuntimeOnly 'com.sun.xml.bind:jaxb-ri:4.0.0' // jakarta.xml.bind-api impl
//    testRuntimeOnly 'com.sun.xml.bind:jaxb-impl:4.0.5'
    testRuntimeOnly 'com.sun.xml.bind:jaxb-impl'

    // https://stackoverflow.com/a/72077713/330457
    // https://docs.spring.io/spring-boot/appendix/dependency-versions/coordinates.html
    testRuntimeOnly("io.netty:netty-resolver-dns-native-macos:4.1.111.Final") {
        artifact {
            classifier = "osx-aarch_64"
        }
    }

    // https://docs.spring.io/spring-cloud-gateway/reference/spring-cloud-gateway/gatewayfilter-factories/local-cache-response-filter.html
    runtimeOnly 'com.github.ben-manes.caffeine:caffeine'
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    testImplementation 'io.vavr:vavr:1.0.0-alpha-4'

//    implementation 'org.springdoc:springdoc-openapi-ui:2.6.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.6.0'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}
compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}
// https://docs.gradle.org/current/userguide/toolchains.html
tasks.withType(JavaCompile).configureEach {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.named('test', Test) {
    useJUnitPlatform()
    systemProperties = System.properties // https://stackoverflow.com/a/40839018/330457
    exclude "**/*IT.class"
}

// https://docs.gradle.org/current/userguide/java_testing.html#sec:configuring_java_integration_tests
// https://docs.gradle.org/current/samples/sample_jvm_multi_project_with_additional_test_types.html
def integrationTest = sourceSets.create('integrationTest')
//sourceSets {
//    intTest {
//        compileClasspath += sourceSets.main.output
//        runtimeClasspath += sourceSets.main.output
//    }
//}
configurations {
    intTestImplementation.extendsFrom testImplementation
    intTestRuntimeOnly.extendsFrom testRuntimeOnly
}
tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'
//    testClassesDirs = sourceSets.intTest.output.classesDirs
//    classpath = sourceSets.intTest.runtimeClasspath
//    testClassesDirs = integrationTest.output.classesDirs
//    classpath = integrationTest.runtimeClasspath
    shouldRunAfter test
    useJUnitPlatform()
    testLogging {
        events "passed"
    }
    exclude '**/*Test.class'
    include '**/*IT.class'
    systemProperties = System.properties
}
check.dependsOn integrationTest

jacoco {
    // https://github.com/jacoco/jacoco/releases
    toolVersion = "0.8.12"
}

//idea {
//    module {
//        downloadJavadoc = true
//        downloadSources = true
//    }
//}

sonar {
    properties {
        property "sonar.projectKey", "jinahya_epost-openapi-proxy"
        property "sonar.organization", "jinahya-github"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
// https://sonarsource.atlassian.net/browse/SCANGRADLE-134
System.setProperty("sonar.gradle.skipCompile", "true")
